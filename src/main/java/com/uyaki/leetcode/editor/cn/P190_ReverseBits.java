//颠倒给定的 32 位无符号整数的二进制位。 
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
// 
// 
//
// 
//
// 进阶: 
//如果多次调用这个函数，你将如何优化你的算法？ 
//
// 
//
// 示例 1： 
//
// 
//输入：n = 00000010100101000001111010011100
//输出：964176192 (00111001011110000010100101000000)
//解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 
//
// 示例 2： 
//
// 
//输入：n = 11111111111111111111111111111101
//输出：3221225471 (10111111111111111111111111111111)
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。 
//
// 
//
// 提示： 
//
// 
// 输入是一个长度为 32 的二进制字符串 
// 
// Related Topics 位运算 分治 👍 435 👎 0


package com.uyaki.leetcode.editor.cn;

/**
 * 颠倒二进制位
 */
public class P190_ReverseBits {
    //leetcode submit region begin(Prohibit modification and deletion)
    public class Solution {
        private static final int M1 = 0x55555555;//01010101 01010101 01010101 01010101
        private static final int M2 = 0x33333333; //00110011 00110011 00110011 00110011
        private static final int M4 = 0x0f0f0f0f; // 00001111 00001111 00001111 00001111
        private static final int M8 = 0x00ff00ff; // 00000000 11111111 00000000 11111111

        // you need treat n as an unsigned value
        public int reverseBits(int n) {
            // 分治法
            // 若要翻转一个二进制串，可以将其均分成左右两部分，对每部分递归执行翻转操作，然后将左半部分拼在右半部分的后面，即完成了翻转
            //与&：0&0=0 0&1=0 1&0=0 1&1=1
            //或|：0|0=0 0|1=1 1|0=1 1|1=1
            //左移<<：左边的二进制位丢弃，右边补0
            //右移>>：正数左补0，负数左补1，右边丢弃
            //无符号左移<<<：左边的二进制位丢弃，右边补0
            //无符号右移>>>：忽略符号位，空位都以0补齐
            //java没有无符号整数类型，对 n 的右移操作应使用逻辑右移。
            n = n >>> 1 & M1 | (n & M1) << 1;
            n = n >>> 2 & M2 | (n & M2) << 2;
            n = n >>> 4 & M4 | (n & M4) << 4;
            n = n >>> 8 & M8 | (n & M8) << 8;
            return n >>> 16 | n << 16;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
