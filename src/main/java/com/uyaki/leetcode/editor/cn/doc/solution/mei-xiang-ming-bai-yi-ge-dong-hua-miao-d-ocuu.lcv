<![1775-2-1.png](https://pic.leetcode.cn/1670310507-OiJYJT-1775-2-1.png),![1775-2-2.png](https://pic.leetcode.cn/1670310507-KAyzey-1775-2-2.png),![1775-2-3.png](https://pic.leetcode.cn/1670310507-jPVURx-1775-2-3.png),![1775-2-4.png](https://pic.leetcode.cn/1670372581-UmZRAr-1775-2-4.png),![1775-3-5.png](https://pic.leetcode.cn/1670311068-PFFLrS-1775-3-5.png)>

#### 详细算法流程

不妨设 $\textit{nums}_1$ 的元素和小于 $\textit{nums}_2$ 的元素和（如果不是则交换这两数组），元素和的差为 $d$。

那么 $\textit{nums}_1$ 的元素需要变大，$\textit{nums}_2$ 的元素需要变小。

计算每个元素的**最大变化量**：

- $\textit{nums}_1[i]$ 最大能变成 $6$，最大变化量为 $6-\textit{nums}_1[i]$；
- $\textit{nums}_2[i]$ 最小能变成 $1$，最大变化量为 $\textit{nums}_2[i]-1$。

统计这些变化量的个数，记到一个哈希表或长为 $6$ 的数组 $\textit{cnt}$ 中，也就是有 $\textit{cnt}[i]$ 个数可以使 $d$ 减少 $i$。

那么从大到小枚举 $i=5,4,3,2,1$：

- 如果 $d > i\cdot\textit{cnt}[i]$，那么应该把这 $\textit{cnt}[i]$ 个数的变化量拉满，并更新 $d$ 为 $d-i\cdot\textit{cnt}[i]$；
- 否则，可以通过修改其中的 $\left\lceil\dfrac{d}{i}\right\rceil$ 个数，使 $d$ 恰好为 $0$，退出循环。

累加需要修改的数的个数，即为答案。如果无法使 $d=0$，返回 $-1$。

#### 优化

假设 $\textit{nums}_1$ 的元素和小于 $\textit{nums}_2$ 的元素和。

把 $\textit{nums}_1$ 的所有数都改成 $6$，$\textit{nums}_2$ 的所有数都改成 $1$，如果 $\textit{nums}_1$ 的元素和仍然小于 $\textit{nums}_2$ 的元素和，则说明无论怎么操作，都无法使这两个数组的元素和相等。

对于 $\textit{nums}_1$ 的元素和大于 $\textit{nums}_2$ 的元素和的情况，也同理。

因此，设 $n$ 为 $\textit{nums}_1$ 的长度，$m$ 为 $\textit{nums}_2$ 的长度，我们可以在一开始就判断下：如果 $6n<m$ 或 $6m<n$，则直接返回 $-1$。否则，一定可以使两个数组的和相等，这是因为从「$\textit{nums}_1$ 的元素和小于 $\textit{nums}_2$ 的元素和」变到「$\textit{nums}_1$ 的元素和大于等于 $\textit{nums}_2$ 的元素和」，由于元素值可以变成 $[1,6]$ 中的任意值，我们可以每次操作只把一个元素增大 $1$ 或减小 $1$，这样必然会遇到元素和相差为 $0$ 的情况。

* [sol1-Python3]

```py
class Solution:
    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:
        if 6 * len(nums1) < len(nums2) or 6 * len(nums2) < len(nums1):
            return -1  # 优化
        d = sum(nums2) - sum(nums1)  # 数组元素和的差，我们要让这个差变为 0
        if d < 0:
            d = -d
            nums1, nums2 = nums2, nums1  # 统一让 nums1 的数变大，nums2 的数变小
        ans = 0
        # 统计每个数的最大变化量（nums1 的变成 6，nums2 的变成 1）
        cnt = Counter(6 - x for x in nums1) + Counter(x - 1 for x in nums2)
        for i in range(5, 0, -1):  # 从大到小枚举最大变化量 5 4 3 2 1
            if i * cnt[i] >= d:  # 可以让 d 变为 0
                return ans + (d + i - 1) // i
            ans += cnt[i]  # 需要所有最大变化量为 i 的数
            d -= i * cnt[i]
```

* [sol1-Java]

```java
class Solution {
    public int minOperations(int[] nums1, int[] nums2) {
        if (6 * nums1.length < nums2.length || 6 * nums2.length < nums1.length)
            return -1; // 优化
        // int d = Arrays.stream(nums2).sum() - Arrays.stream(nums1).sum();
        int d = 0; // 数组元素和的差，我们要让这个差变为 0
        for (int x : nums2) d += x;
        for (int x : nums1) d -= x;
        if (d < 0) {
            d = -d;
            int[] tmp = nums1;
            nums1 = nums2;
            nums2 = tmp; // 交换，统一让 nums1 的数变大，nums2 的数变小
        }
        int[] cnt = new int[6]; // 统计每个数的最大变化量
        for (int x : nums1) ++cnt[6 - x]; // nums1 的变成 6
        for (int x : nums2) ++cnt[x - 1]; // nums2 的变成 1
        for (int i = 5, ans = 0; ; --i) { // 从大到小枚举最大变化量 5 4 3 2 1
            if (i * cnt[i] >= d) // 可以让 d 变为 0
                return ans + (d + i - 1) / i;
            ans += cnt[i]; // 需要所有最大变化量为 i 的数
            d -= i * cnt[i];
        }
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int minOperations(vector<int> &nums1, vector<int> &nums2) {
        if (6 * nums1.size() < nums2.size() || 6 * nums2.size() < nums1.size())
            return -1; // 优化
        int d = accumulate(nums2.begin(), nums2.end(), 0) - accumulate(nums1.begin(), nums1.end(), 0);
        if (d < 0) {
            d = -d;
            swap(nums1, nums2); // 统一让 nums1 的数变大，nums2 的数变小
        }
        int cnt[6]{}; // 统计每个数的最大变化量
        for (int x: nums1) ++cnt[6 - x]; // nums1 的变成 6
        for (int x: nums2) ++cnt[x - 1]; // nums2 的变成 1
        for (int i = 5, ans = 0;; --i) { // 从大到小枚举最大变化量 5 4 3 2 1
            if (i * cnt[i] >= d) // 可以让 d 变为 0
                return ans + (d + i - 1) / i;
            ans += cnt[i]; // 需要所有最大变化量为 i 的数
            d -= i * cnt[i];
        }
    }
};
```

* [sol1-Go]

```go
func minOperations(nums1, nums2 []int) (ans int) {
    if 6*len(nums1) < len(nums2) || 6*len(nums2) < len(nums1) {
        return -1 // 优化
    }
    d := 0 // 数组元素和的差，我们要让这个差变为 0
    for _, x := range nums2 { d += x }
    for _, x := range nums1 { d -= x }
    if d < 0 {
        d = -d
        nums1, nums2 = nums2, nums1 // 统一让 nums1 的数变大，nums2 的数变小
    }
    cnt := [6]int{} // 统计每个数的最大变化量
    for _, x := range nums1 { cnt[6-x]++ } // nums1 的变成 6
    for _, x := range nums2 { cnt[x-1]++ } // nums2 的变成 1
    for i := 5; ; i-- { // 从大到小枚举最大变化量 5 4 3 2 1
        if i*cnt[i] >= d { // 可以让 d 变为 0
            return ans + (d+i-1)/i
        }
        ans += cnt[i] // 需要所有最大变化量为 i 的数
        d -= i * cnt[i]
    }
}
```

#### 复杂度分析

- 时间复杂度：$O(n+m)$，其中 $n$ 为 $\textit{nums}_1$ 的长度，$m$ 为 $\textit{nums}_2$ 的长度。
- 空间复杂度：$O(C)$。本题 $C=6$。

---

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)，最近正在连载 [【基础算法精讲】](https://www.bilibili.com/video/BV1AP41137w7/)，欢迎收看~
